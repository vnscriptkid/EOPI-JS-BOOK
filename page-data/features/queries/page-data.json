{"componentChunkName":"component---src-templates-docs-js","path":"/features/queries","webpackCompilationHash":"e536b55f7567f3131f54","result":{"data":{"site":{"siteMetadata":{"title":"EOPI-JS","docsLocation":"https://github.com/brianc/node-postgres-docs/tree/master/content"}},"mdx":{"fields":{"id":"3cb23bd2-ca2a-55b6-bd2c-05dab8909516","title":"Queries","slug":"/features/queries"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Queries\",\n  \"slug\": \"/features/queries\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The api for executing queries supports both callbacks and promises. I'll provide an example for both \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"styles\"), \" here. For the sake of brevity I am using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.query\"), \" method instead of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.query\"), \" method - both methods support the same API. In fact, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.query\"), \" delegates directly to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.query\"), \" internally.\"), mdx(\"h2\", {\n    \"id\": \"text-only\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Text only\"), mdx(\"p\", null, \"If your query has no parameters you do not need to include them to the query method:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// callback\\nclient.query('SELECT NOW() as now', (err, res) => {\\n  if (err) {\\n    console.log(err.stack)\\n  } else {\\n    console.log(res.rows[0])\\n  }\\n})\\n\\n// promise\\nclient\\n  .query('SELECT NOW() as now')\\n  .then(res => console.log(res.rows[0]))\\n  .catch(e => console.error(e.stack))\\n\")), mdx(\"h2\", {\n    \"id\": \"parameterized-query\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Parameterized query\"), mdx(\"p\", null, \"If you are passing parameters to your queries you will want to avoid string concatenating parameters into the query text directly. This can (and often does) lead to sql injection vulnerabilities. node-postgres supports parameterized queries, passing your query text \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"unaltered\"), \" as well as your parameters to the PostgreSQL server where the parameters are safely substituted into the query with battle-tested parameter substitution code within the server itself.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const text = 'INSERT INTO users(name, email) VALUES($1, $2) RETURNING *'\\nconst values = ['brianc', 'brian.m.carlson@gmail.com']\\n\\n// callback\\nclient.query(text, values, (err, res) => {\\n  if (err) {\\n    console.log(err.stack)\\n  } else {\\n    console.log(res.rows[0])\\n    // { name: 'brianc', email: 'brian.m.carlson@gmail.com' }\\n  }\\n})\\n\\n// promise\\nclient\\n  .query(text, values)\\n  .then(res => {\\n    console.log(res.rows[0])\\n    // { name: 'brianc', email: 'brian.m.carlson@gmail.com' }\\n  })\\n  .catch(e => console.error(e.stack))\\n\\n// async/await\\ntry {\\n  const res = await client.query(text, values)\\n  console.log(res.rows[0])\\n  // { name: 'brianc', email: 'brian.m.carlson@gmail.com' }\\n} catch (err) {\\n  console.log(err.stack)\\n}\\n\")), mdx(\"div\", {\n    className: \"alert alert-warning\"\n  }, \"PostgreSQL does not support parameters for identifiers. If you need to have dynamic database, schema, table, or column names (e.g. in DDL statements) use \", mdx(\"a\", {\n    href: \"https://www.npmjs.com/package/pg-format\"\n  }, \"pg-format\"), \" package for handling escaping these values to ensure you do not have SQL injection!\"), mdx(\"p\", null, \"Parameters passed as the second argument to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"query()\"), \" will be converted to raw data types using the following rules:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null and undefined\")), mdx(\"p\", null, \"If parameterizing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"undefined\"), \" then both will be converted to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Date\")), mdx(\"p\", null, \"Custom conversion to a UTC date string.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Buffer\")), mdx(\"p\", null, \"Buffer instances are unchanged.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Array\")), mdx(\"p\", null, \"Converted to a string that describes a Postgres array. Each array item is recursively converted using the rules described here.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Object\")), mdx(\"p\", null, \"If a parameterized value has the method \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toPostgres\"), \" then it will be called and its return value will be used in the query.\\nThe signature of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toPostgres\"), \" is the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"toPostgres (prepareValue: (value) => any): any\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"prepareValue\"), \" function provided can be used to convert nested types to raw data types suitable for the database.\"), mdx(\"p\", null, \"Otherwise if no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toPostgres\"), \" method is defined then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"JSON.stringify\"), \" is called on the parameterized value.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Everything else\")), mdx(\"p\", null, \"All other parameterized values will be converted by calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value.toString\"), \" on the value.\"), mdx(\"h2\", {\n    \"id\": \"query-config-object\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Query config object\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.query\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.query\"), \" both support taking a config object as an argument instead of taking a string and optional array of parameters. The same example above could also be performed like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const query = {\\n  text: 'INSERT INTO users(name, email) VALUES($1, $2)',\\n  values: ['brianc', 'brian.m.carlson@gmail.com'],\\n}\\n\\n// callback\\nclient.query(query, (err, res) => {\\n  if (err) {\\n    console.log(err.stack)\\n  } else {\\n    console.log(res.rows[0])\\n  }\\n})\\n\\n// promise\\nclient\\n  .query(query)\\n  .then(res => console.log(res.rows[0]))\\n  .catch(e => console.error(e.stack))\\n\")), mdx(\"p\", null, \"The query config object allows for a few more advanced scenarios:\"), mdx(\"h3\", {\n    \"id\": \"prepared-statements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Prepared statements\"), mdx(\"p\", null, \"PostgreSQL has the concept of a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.postgresql.org/docs/9.3/static/sql-prepare.html\"\n  }), \"prepared statement\"), \". node-postgres supports this by supplying a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" parameter to the query config object. If you supply a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" parameter the query execution plan will be cached on the PostgreSQL server on a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"per connection basis\"), \". This means if you use two different connections each will have to parse & plan the query once. node-postgres handles this transparently for you: a client only requests a query to be parsed the first time that particular client has seen that query name:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const query = {\\n  // give the query a unique name\\n  name: 'fetch-user',\\n  text: 'SELECT * FROM user WHERE id = $1',\\n  values: [1],\\n}\\n\\n// callback\\nclient.query(query, (err, res) => {\\n  if (err) {\\n    console.log(err.stack)\\n  } else {\\n    console.log(res.rows[0])\\n  }\\n})\\n\\n// promise\\nclient\\n  .query(query)\\n  .then(res => console.log(res.rows[0]))\\n  .catch(e => console.error(e.stack))\\n\")), mdx(\"p\", null, \"In the above example the first time the client sees a query with the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'fetch-user'\"), \" it will send a 'parse' request to the PostgreSQL server & execute the query as normal. The second time, it will skip the 'parse' request and send the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"name\"), \" of the query to the PostgreSQL server.\"), mdx(\"div\", {\n    className: \"message is-warning\"\n  }, mdx(\"div\", {\n    className: \"message-body\"\n  }, \"Be careful not to fall into the trap of premature optimization.  Most of your queries will likely not benefit much, if at all, from using prepared statements.  This is a somewhat \\\"power user\\\" feature of PostgreSQL that is best used when you know how to use it - namely with very complex queries with lots of joins and advanced operations like union and switch statements.  I rarely use this feature in my own apps unless writing complex aggregate queries for reports and I know the reports are going to be executed very frequently.\")), mdx(\"h3\", {\n    \"id\": \"row-mode\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Row mode\"), mdx(\"p\", null, \"By default node-postgres reads rows and collects them into JavaScript objects with the keys matching the column names and the values matching the corresponding row value for each column. If you do not need or do not want this behavior you can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rowMode: 'array'\"), \" to a query object. This will inform the result parser to bypass collecting rows into a JavaScript object, and instead will return each row as an array of values.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const query = {\\n  text: 'SELECT $1::text as first_name, $2::text as last_name',\\n  values: ['Brian', 'Carlson'],\\n  rowMode: 'array',\\n}\\n\\n// callback\\nclient.query(query, (err, res) => {\\n  if (err) {\\n    console.log(err.stack)\\n  } else {\\n    console.log(res.fields.map(field => field.name)) // ['first_name', 'last_name']\\n    console.log(res.rows[0]) // ['Brian', 'Carlson']\\n  }\\n})\\n\\n// promise\\nclient\\n  .query(query)\\n  .then(res => {\\n    console.log(res.fields.map(field => field.name)) // ['first_name', 'last_name']\\n    console.log(res.rows[0]) // ['Brian', 'Carlson']\\n  })\\n  .catch(e => console.error(e.stack))\\n\")), mdx(\"h3\", {\n    \"id\": \"types\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Types\"), mdx(\"p\", null, \"You can pass in a custom set of type parsers to use when parsing the results of a particular query. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"types\"), \" property must conform to the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/api/types\"\n  }), \"Types\"), \" API. Here is an example in which every value is returned as a string:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const query = {\\n  text: 'SELECT * from some_table',\\n  types: {\\n    getTypeParser: () => val => val,\\n  },\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#text-only","title":"Text only"},{"url":"#parameterized-query","title":"Parameterized query"},{"url":"#query-config-object","title":"Query config object","items":[{"url":"#prepared-statements","title":"Prepared statements"},{"url":"#row-mode","title":"Row mode"},{"url":"#types","title":"Types"}]}]},"parent":{"__typename":"File","relativePath":"features/2-queries.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features","filename":{"name":"features"}}}},{"node":{"fields":{"slug":"/guides","title":"Guides","filename":{"name":"guides"}}}},{"node":{"fields":{"slug":"/api","title":"API","filename":{"name":"api"}}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result","filename":{"name":"3-result"}}}},{"node":{"fields":{"slug":"/api/types","title":"Types","filename":{"name":"4-types"}}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries","filename":{"name":"2-queries"}}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling","filename":{"name":"3-pooling"}}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions","filename":{"name":"4-transactions"}}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL","filename":{"name":"6-ssl"}}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings","filename":{"name":"7-native"}}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types","filename":{"name":"5-types"}}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting","filename":{"name":"1-connecting"}}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure","filename":{"name":"1-project-structure"}}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await","filename":{"name":"2-async-express"}}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor","filename":{"name":"5-cursor"}}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading","filename":{"name":"3-upgrading"}}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements","filename":{"name":"announcements"}}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client","filename":{"name":"2-client"}}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool","filename":{"name":"1-pool"}}}},{"node":{"fields":{"slug":"/","title":"Welcome","filename":{"name":"welcome"}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3cb23bd2-ca2a-55b6-bd2c-05dab8909516"}}}