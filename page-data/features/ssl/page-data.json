{"componentChunkName":"component---src-templates-docs-js","path":"/features/ssl","webpackCompilationHash":"e536b55f7567f3131f54","result":{"data":{"site":{"siteMetadata":{"title":"EOPI-JS","docsLocation":"https://github.com/brianc/node-postgres-docs/tree/master/content"}},"mdx":{"fields":{"id":"99ca3c8e-b600-50c1-8ba4-167dd57fe989","title":"SSL","slug":"/features/ssl"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SSL\",\n  \"slug\": \"/features/ssl\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"node-postgres supports TLS/SSL connections to your PostgreSQL server as long as the server is configured to support it. When instantiating a pool or a client you can provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssl\"), \" property on the config object and it will be passed to the constructor for the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/tls.html#tls_class_tls_tlssocket\"\n  }), \"node TLSSocket\"), \".\"), mdx(\"h2\", {\n    \"id\": \"self-signed-cert\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Self-signed cert\"), mdx(\"p\", null, \"Here's an example of a configuration you can use to connect a client or a pool to a PostgreSQL server.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const config = {\\n  database: 'database-name',\\n  host: 'host-or-ip',\\n  // this object will be passed to the TLSSocket constructor\\n  ssl: {\\n    rejectUnauthorized: false,\\n    ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\\n    key: fs.readFileSync('/path/to/client-key/postgresql.key').toString(),\\n    cert: fs.readFileSync('/path/to/client-certificates/postgresql.crt').toString(),\\n  },\\n}\\n\\nimport { Client, Pool } from 'pg'\\n\\nconst client = new Client(config)\\nclient.connect(err => {\\n  if (err) {\\n    console.error('error connecting', err.stack)\\n  } else {\\n    console.log('connected')\\n    client.end()\\n  }\\n})\\n\\nconst pool = new Pool(config)\\npool\\n  .connect()\\n  .then(client => {\\n    console.log('connected')\\n    client.release()\\n  })\\n  .catch(err => console.error('error connecting', err.stack))\\n  .then(() => pool.end())\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-connectionstring\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Usage with \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"connectionString\")), mdx(\"p\", null, \"If you plan to use a combination of a database connection string from the environment and SSL settings in the config object directly, then you must avoid including any of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sslcert\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sslkey\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sslrootcert\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sslmode\"), \" in the connection string. If any of these options are used then the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssl\"), \" object is replaced and any additional options provided there will be lost.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const config = {\\n  connectionString: 'postgres://user:password@host:port/db?sslmode=require',\\n  // Beware! The ssl object is overwritten when parsing the connectionString\\n  ssl: {\\n    rejectUnauthorized: false,\\n    ca: fs.readFileSync('/path/to/server-certificates/root.crt').toString(),\\n  },\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#self-signed-cert","title":"Self-signed cert"},{"url":"#usage-with-connectionstring","title":"Usage with connectionString"}]},"parent":{"__typename":"File","relativePath":"features/6-ssl.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features","filename":{"name":"features"}}}},{"node":{"fields":{"slug":"/guides","title":"Guides","filename":{"name":"guides"}}}},{"node":{"fields":{"slug":"/api","title":"API","filename":{"name":"api"}}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result","filename":{"name":"3-result"}}}},{"node":{"fields":{"slug":"/api/types","title":"Types","filename":{"name":"4-types"}}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries","filename":{"name":"2-queries"}}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling","filename":{"name":"3-pooling"}}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions","filename":{"name":"4-transactions"}}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL","filename":{"name":"6-ssl"}}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings","filename":{"name":"7-native"}}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types","filename":{"name":"5-types"}}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting","filename":{"name":"1-connecting"}}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure","filename":{"name":"1-project-structure"}}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await","filename":{"name":"2-async-express"}}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor","filename":{"name":"5-cursor"}}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading","filename":{"name":"3-upgrading"}}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements","filename":{"name":"announcements"}}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client","filename":{"name":"2-client"}}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool","filename":{"name":"1-pool"}}}},{"node":{"fields":{"slug":"/","title":"Welcome","filename":{"name":"welcome"}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"99ca3c8e-b600-50c1-8ba4-167dd57fe989"}}}