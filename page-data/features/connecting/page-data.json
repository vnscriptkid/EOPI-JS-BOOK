{"componentChunkName":"component---src-templates-docs-js","path":"/features/connecting","webpackCompilationHash":"e536b55f7567f3131f54","result":{"data":{"site":{"siteMetadata":{"title":"EOPI-JS","docsLocation":"https://github.com/brianc/node-postgres-docs/tree/master/content"}},"mdx":{"fields":{"id":"edbf7ae1-972a-5740-b800-8cc8b8382315","title":"Connecting","slug":"/features/connecting"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Connecting\",\n  \"slug\": \"/features/connecting\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"environment-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Environment variables\"), mdx(\"p\", null, \"node-postgres uses the same \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.postgresql.org/docs/9.1/static/libpq-envars.html\"\n  }), \"environment variables\"), \" as libpq to connect to a PostgreSQL server. Both individual clients & pools will use these environment variables. Here's a tiny program connecting node.js to the PostgreSQL server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool, Client } = require('pg')\\n\\n// pools will use environment variables\\n// for connection information\\nconst pool = new Pool()\\n\\npool.query('SELECT NOW()', (err, res) => {\\n  console.log(err, res)\\n  pool.end()\\n})\\n\\n// you can also use async/await\\nconst res = await pool.query('SELECT NOW()')\\nawait pool.end()\\n\\n// clients will also use environment variables\\n// for connection information\\nconst client = new Client()\\nawait client.connect()\\n\\nconst res = await client.query('SELECT NOW()')\\nawait client.end()\\n\")), mdx(\"p\", null, \"To run the above program and specify which database to connect to we can invoke it like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ PGUSER=dbuser \\\\\\n  PGHOST=database.server.com \\\\\\n  PGPASSWORD=secretpassword \\\\\\n  PGDATABASE=mydb \\\\\\n  PGPORT=3211 \\\\\\n  node script.js\\n\")), mdx(\"p\", null, \"This allows us to write our programs without having to specify connection information in the program and lets us reuse them to connect to different databases without having to modify the code.\"), mdx(\"p\", null, \"The default values for the environment variables used are:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"PGHOST='localhost'\\nPGUSER=process.env.USER\\nPGDATABASE=process.env.USER\\nPGPASSWORD=null\\nPGPORT=5432\\n\")), mdx(\"h2\", {\n    \"id\": \"programmatic\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Programmatic\"), mdx(\"p\", null, \"node-postgres also supports configuring a pool or client programmatically with connection information. Here's our same script from above modified to use programmatic (hard-coded in this case) values. This can be useful if your application already has a way to manage config values or you don't want to use environment variables.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool, Client } = require('pg')\\n\\nconst pool = new Pool({\\n  user: 'dbuser',\\n  host: 'database.server.com',\\n  database: 'mydb',\\n  password: 'secretpassword',\\n  port: 3211,\\n})\\n\\npool.query('SELECT NOW()', (err, res) => {\\n  console.log(err, res)\\n  pool.end()\\n})\\n\\nconst client = new Client({\\n  user: 'dbuser',\\n  host: 'database.server.com',\\n  database: 'mydb',\\n  password: 'secretpassword',\\n  port: 3211,\\n})\\nclient.connect()\\n\\nclient.query('SELECT NOW()', (err, res) => {\\n  console.log(err, res)\\n  client.end()\\n})\\n\")), mdx(\"p\", null, \"Many cloud providers include alternative methods for connecting to database instances using short-lived authentication tokens. node-postgres supports dynamic passwords via a callback function, either synchronous or asynchronous. The callback function must resolve to a string.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\nconst { RDS } = require('aws-sdk')\\n\\nconst signerOptions = {\\n  credentials: {\\n    accessKeyId: 'YOUR-ACCESS-KEY',\\n    secretAccessKey: 'YOUR-SECRET-ACCESS-KEY',\\n  },\\n  region: 'us-east-1',\\n  hostname: 'example.aslfdewrlk.us-east-1.rds.amazonaws.com',\\n  port: 5432,\\n  username: 'api-user',\\n}\\n\\nconst signer = new RDS.Signer()\\n\\nconst getPassword = () => signer.getAuthToken(signerOptions)\\n\\nconst pool = new Pool({\\n  host: signerOptions.hostname,\\n  port: signerOptions.port,\\n  user: signerOptions.username,\\n  database: 'my-db',\\n  password: getPassword,\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"programmatic-connection-to-sockets\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Programmatic Connection to Sockets\"), mdx(\"p\", null, \"Connections to unix sockets can also be made. This can be useful on distros like Ubuntu, where authentication is managed via the socket connection instead of a password.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Client } = require('pg');\\nclient = new Client({\\n    host: '/cloudsql/myproject:zone:mydb',\\n    user: 'username',\\n    password: 'password',\\n    database: 'database_name',\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"connection-uri\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Connection URI\"), mdx(\"p\", null, \"You can initialize both a pool and a client with a connection string URI as well. This is common in environments like Heroku where the database connection string is supplied to your application dyno through an environment variable. Connection string parsing brought to you by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/iceddev/pg-connection-string\"\n  }), \"pg-connection-string\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool, Client } = require('pg')\\nconst connectionString = 'postgresql://dbuser:secretpassword@database.server.com:3211/mydb'\\n\\nconst pool = new Pool({\\n  connectionString,\\n})\\n\\npool.query('SELECT NOW()', (err, res) => {\\n  console.log(err, res)\\n  pool.end()\\n})\\n\\nconst client = new Client({\\n  connectionString,\\n})\\nclient.connect()\\n\\nclient.query('SELECT NOW()', (err, res) => {\\n  console.log(err, res)\\n  client.end()\\n})\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#environment-variables","title":"Environment variables"},{"url":"#programmatic","title":"Programmatic","items":[{"url":"#programmatic-connection-to-sockets","title":"Programmatic Connection to Sockets"}]},{"url":"#connection-uri","title":"Connection URI"}]},"parent":{"__typename":"File","relativePath":"features/1-connecting.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features","filename":{"name":"features"}}}},{"node":{"fields":{"slug":"/guides","title":"Guides","filename":{"name":"guides"}}}},{"node":{"fields":{"slug":"/api","title":"API","filename":{"name":"api"}}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result","filename":{"name":"3-result"}}}},{"node":{"fields":{"slug":"/api/types","title":"Types","filename":{"name":"4-types"}}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries","filename":{"name":"2-queries"}}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling","filename":{"name":"3-pooling"}}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions","filename":{"name":"4-transactions"}}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL","filename":{"name":"6-ssl"}}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings","filename":{"name":"7-native"}}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types","filename":{"name":"5-types"}}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting","filename":{"name":"1-connecting"}}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure","filename":{"name":"1-project-structure"}}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await","filename":{"name":"2-async-express"}}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor","filename":{"name":"5-cursor"}}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading","filename":{"name":"3-upgrading"}}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements","filename":{"name":"announcements"}}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client","filename":{"name":"2-client"}}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool","filename":{"name":"1-pool"}}}},{"node":{"fields":{"slug":"/","title":"Welcome","filename":{"name":"welcome"}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"edbf7ae1-972a-5740-b800-8cc8b8382315"}}}