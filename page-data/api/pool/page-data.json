{"componentChunkName":"component---src-templates-docs-js","path":"/api/pool","webpackCompilationHash":"e536b55f7567f3131f54","result":{"data":{"site":{"siteMetadata":{"title":"EOPI-JS","docsLocation":"https://github.com/brianc/node-postgres-docs/tree/master/content"}},"mdx":{"fields":{"id":"8be9516d-3e20-54ef-9c1d-52eed7e32e87","title":"pg.Pool","slug":"/api/pool"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"pg.Pool\",\n  \"slug\": \"/api/pool\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"constructor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"constructor\"), mdx(\"h3\", {\n    \"id\": \"new-poolconfig-object\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"new Pool(\", \"[config: object]\", \")\"), mdx(\"p\", null, \"Every field of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \" object is entirely optional. The config passed to the pool is also passed to every client instance within the pool when the pool creates that client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-flow\"\n  }), \"config = {\\n  // all valid client config options are also valid here\\n  // in addition here are the pool specific configuration parameters:\\n\\n  // number of milliseconds to wait before timing out when connecting a new client\\n  // by default this is 0 which means no timeout\\n  connectionTimeoutMillis?: int,\\n\\n  // number of milliseconds a client must sit idle in the pool and not be checked out\\n  // before it is disconnected from the backend and discarded\\n  // default is 10000 (10 seconds) - set to 0 to disable auto-disconnection of idle clients\\n  idleTimeoutMillis?: int,\\n\\n  // maximum number of clients the pool should contain\\n  // by default this is set to 10.\\n  max?: int,\\n  \\n  // Default behavior is the pool will keep clients open & connected to the backend \\n  // until idleTimeoutMillis expire for each client and node will maintain a ref \\n  // to the socket on the client, keeping the event loop alive until all clients are closed \\n  // after being idle or the pool is manually shutdown with `pool.end()`.\\n  //\\n  // Setting `allowExitOnIdle: true` in the config will allow the node event loop to exit \\n  // as soon as all clients in the pool are idle, even if their socket is still open \\n  // to the postgres server.  This can be handy in scripts & tests \\n  // where you don't want to wait for your clients to go idle before your process exits.\\n  allowExitOnIdle?: boolean\\n}\\n\")), mdx(\"p\", null, \"example to create a new pool with configuration:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool({\\n  host: 'localhost',\\n  user: 'database-user',\\n  max: 20,\\n  idleTimeoutMillis: 30000,\\n  connectionTimeoutMillis: 2000,\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"poolconnect\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"pool.connect\"), mdx(\"h3\", {\n    \"id\": \"poolconnectcallback-err-error-client-pgclient-release-releasecallback--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.connect(callback: (err?: Error, client?: pg.Client, release?: releaseCallback) => void) => void\")), mdx(\"p\", null, \"Acquires a client from the pool. If the pool is 'full' and all clients are currently checked out, this will wait in a FIFO queue until a client becomes available by it being released back to the pool. If there are idle clients in the pool it will be returned to the callback on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process.nextTick\"), \". If the pool is not full a new client will be created & returned to this callback.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\npool.connect((err, client, release) => {\\n  if (err) {\\n    return console.error('Error acquiring client', err.stack)\\n  }\\n  client.query('SELECT NOW()', (err, result) => {\\n    release()\\n    if (err) {\\n      return console.error('Error executing query', err.stack)\\n    }\\n    console.log(result.rows)\\n  })\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"poolconnect--promisepgclient\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.connect() => Promise<pg.Client>\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\n;(async function() {\\n  const client = await pool.connect()\\n  await client.query('SELECT NOW()')\\n  client.release()\\n})()\\n\")), mdx(\"div\", {\n    className: \"alert alert-warning\"\n  }, \"You \", mdx(\"strong\", null, \"must\"), \" call the \", mdx(\"span\", {\n    className: \"code\"\n  }, \"releaseCallback\"), \" or\", ' ', mdx(\"span\", {\n    className: \"code\"\n  }, \"client.release\"), \" (which points to the \", mdx(\"span\", {\n    className: \"code\"\n  }, \"releaseCallback\"), \") when you are finished with a client. If you forget to release the client then your application will quickly exhaust available, idle clients in the pool and all further calls to \", mdx(\"span\", {\n    className: \"code\"\n  }, \"pool.connect\"), \" will timeout with an error or hang indefinitely if you have \", mdx(\"span\", {\n    className: \"code\"\n  }, \"connectionTimeoutMillis\"), \" configured to 0.\"), mdx(\"h2\", {\n    \"id\": \"releasecallback\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"releaseCallback\"), mdx(\"h3\", {\n    \"id\": \"release-err-error\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"release: (err?: Error)\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"releaseCallback\"), \" releases an acquired client back to the pool. If you pass a truthy value in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"err\"), \" position to the callback, instead of releasing the client to the pool, the pool will be instructed to disconnect and destroy this client, leaving a space within itself for a new client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\nassert(pool.totalCount === 0)\\nassert(pool.idleCount === 0)\\n;(async function() {\\n  const client = await pool.connect()\\n  await client.query('SELECT NOW()')\\n  assert(pool.totalCount === 1)\\n  assert(pool.idleCount === 0)\\n\\n  // tell the pool to destroy this client\\n  client.release(true)\\n  assert(pool.idleCount === 0)\\n  assert(pool.totalCount === 0)\\n})()\\n\")), mdx(\"p\", null, \"Client instances returned from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.connect\"), \" will have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"release\"), \" method which will release them from the pool. This is the same method that is passed to the connect callback as the 3rd argument if you're using the pool with callbacks.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\npool.connect((err, client, release) => {\\n  assert(client.release === release)\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"poolquery\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"pool.query\"), mdx(\"p\", null, \"Often we only need to run a single query on the database, so as convenience the pool has a method to run a query on the first available idle client and return its result.\"), mdx(\"h3\", {\n    \"id\": \"poolquerycallback-err-error-result-pgresult--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"pool.query(callback: (err?: Error, result: pg.Result)) => void\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\npool.query('SELECT $1::text as name', ['brianc'], (err, result) => {\\n  if (err) {\\n    return console.error('Error executing query', err.stack)\\n  }\\n  console.log(result.rows[0].name) // brianc\\n})\\n\")), mdx(\"p\", null, \"Promises are also supported:\"), mdx(\"h3\", {\n    \"id\": \"poolquery--promisepgresult\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.query() => Promise<pg.Result>\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\npool\\n  .query('SELECT $1::text as name', ['brianc'])\\n  .then(res => console.log(res.rows[0].name)) // brianc\\n  .catch(err => console.error('Error executing query', err.stack))\\n\")), mdx(\"p\", null, \"Notice in the example above no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"releaseCallback\"), \" was necessary. The pool is doing the acquiring and releasing internally. I find \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.query\"), \" to be a handy shortcut in a lot of situations.\"), mdx(\"div\", {\n    className: \"alert alert-danger\"\n  }, \"Do \", mdx(\"strong\", null, \"not\"), \" use pool.query if you need transactional integrity: the pool will dispatch every query passed to pool.query on the first available idle client. Transactions within PostgreSQL are scoped to a single client and so dispatching individual queries within a single transaction across multiple, random clients will cause big problems in your app and not work. For more info please read \", mdx(\"a\", {\n    href: \"/features/transactions\"\n  }, \"transactions\"), \".\"), mdx(\"h2\", {\n    \"id\": \"poolend\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"pool.end\"), mdx(\"p\", null, \"Calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pool.end\"), \" will drain the pool of all active clients, disconnect them, and shut down any internal timers in the pool. It is common to call this at the end of a script using the pool or when your process is attempting to shut down cleanly.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// again both promises and callbacks are supported:\\nconst { Pool } = require('pg')\\n\\nconst pool = new Pool()\\n\\n// either this:\\npool.end(() => {\\n  console.log('pool has ended')\\n})\\n\\n// or this:\\npool.end().then(() => console.log('pool has ended'))\\n\")), mdx(\"h2\", {\n    \"id\": \"properties\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"properties\"), mdx(\"h3\", {\n    \"id\": \"pooltotalcount-int\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.totalCount: int\")), mdx(\"p\", null, \"The total number of clients existing within the pool.\"), mdx(\"h3\", {\n    \"id\": \"poolidlecount-int\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.idleCount: int\")), mdx(\"p\", null, \"The number of clients which are not checked out but are currently idle in the pool.\"), mdx(\"h3\", {\n    \"id\": \"poolwaitingcount-int\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.waitingCount: int\")), mdx(\"p\", null, \"The number of queued requests waiting on a client when all clients are checked out. It can be helpful to monitor this number to see if you need to adjust the size of the pool.\"), mdx(\"h2\", {\n    \"id\": \"events\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"events\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pool\"), \" instances are also instances of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nodejs.org/api/events.html\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"EventEmitter\")), \".\"), mdx(\"h3\", {\n    \"id\": \"poolonconnect-client-client--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.on('connect', (client: Client) => void) => void\")), mdx(\"p\", null, \"Whenever the pool establishes a new client connection to the PostgreSQL backend it will emit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"connect\"), \" event with the newly connected client. This presents an opportunity for you to run setup commands on a client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const pool = new Pool()\\npool.on('connect', client => {\\n  client.query('SET DATESTYLE = iso, mdy')\\n})\\n\")), mdx(\"h3\", {\n    \"id\": \"poolonacquire-client-client--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.on('acquire', (client: Client) => void) => void\")), mdx(\"p\", null, \"Whenever a client is checked out from the pool the pool will emit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"acquire\"), \" event with the client that was acquired.\"), mdx(\"h3\", {\n    \"id\": \"poolonerror-err-error-client-client--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.on('error', (err: Error, client: Client) => void) => void\")), mdx(\"p\", null, \"When a client is sitting idly in the pool it can still emit errors because it is connected to a live backend. If the backend goes down or a network partition is encountered all the idle, connected clients in your application will emit an error \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"through\"), \" the pool's error event emitter. The error listener is passed the error as the first argument and the client upon which the error occurred as the 2nd argument. The client will be automatically terminated and removed from the pool, it is only passed to the error handler in case you want to inspect it.\"), mdx(\"div\", {\n    className: \"alert alert-warning\"\n  }, \"It is important you add an event listener to the pool to catch errors. Just like other event emitters, if a pool emits an \", mdx(\"span\", {\n    className: \"code\"\n  }, \"error\"), \" event and no listeners are added node will emit an uncaught error and potentially exit.\"), mdx(\"h3\", {\n    \"id\": \"poolonremove-client-client--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"pool.on('remove', (client: Client) => void) => void\")), mdx(\"p\", null, \"Whenever a client is closed & removed from the pool the pool will emit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remove\"), \" event.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#constructor","title":"constructor","items":[{"url":"#new-poolconfig-object","title":"new Pool(config: object)"}]},{"url":"#poolconnect","title":"pool.connect","items":[{"url":"#poolconnectcallback-err-error-client-pgclient-release-releasecallback--void--void","title":"pool.connect(callback: (err?: Error, client?: pg.Client, release?: releaseCallback) => void) => void"},{"url":"#poolconnect--promisepgclient","title":"pool.connect() => Promise<pg.Client>"}]},{"url":"#releasecallback","title":"releaseCallback","items":[{"url":"#release-err-error","title":"release: (err?: Error)"}]},{"url":"#poolquery","title":"pool.query","items":[{"url":"#poolquerycallback-err-error-result-pgresult--void","title":"pool.query(callback: (err?: Error, result: pg.Result)) => void"},{"url":"#poolquery--promisepgresult","title":"pool.query() => Promise<pg.Result>"}]},{"url":"#poolend","title":"pool.end"},{"url":"#properties","title":"properties","items":[{"url":"#pooltotalcount-int","title":"pool.totalCount: int"},{"url":"#poolidlecount-int","title":"pool.idleCount: int"},{"url":"#poolwaitingcount-int","title":"pool.waitingCount: int"}]},{"url":"#events","title":"events","items":[{"url":"#poolonconnect-client-client--void--void","title":"pool.on('connect', (client: Client) => void) => void"},{"url":"#poolonacquire-client-client--void--void","title":"pool.on('acquire', (client: Client) => void) => void"},{"url":"#poolonerror-err-error-client-client--void--void","title":"pool.on('error', (err: Error, client: Client) => void) => void"},{"url":"#poolonremove-client-client--void--void","title":"pool.on('remove', (client: Client) => void) => void"}]}]},"parent":{"__typename":"File","relativePath":"api/1-pool.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features","filename":{"name":"features"}}}},{"node":{"fields":{"slug":"/guides","title":"Guides","filename":{"name":"guides"}}}},{"node":{"fields":{"slug":"/api","title":"API","filename":{"name":"api"}}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result","filename":{"name":"3-result"}}}},{"node":{"fields":{"slug":"/api/types","title":"Types","filename":{"name":"4-types"}}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries","filename":{"name":"2-queries"}}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling","filename":{"name":"3-pooling"}}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions","filename":{"name":"4-transactions"}}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL","filename":{"name":"6-ssl"}}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings","filename":{"name":"7-native"}}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types","filename":{"name":"5-types"}}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting","filename":{"name":"1-connecting"}}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure","filename":{"name":"1-project-structure"}}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await","filename":{"name":"2-async-express"}}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor","filename":{"name":"5-cursor"}}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading","filename":{"name":"3-upgrading"}}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements","filename":{"name":"announcements"}}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client","filename":{"name":"2-client"}}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool","filename":{"name":"1-pool"}}}},{"node":{"fields":{"slug":"/","title":"Welcome","filename":{"name":"welcome"}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8be9516d-3e20-54ef-9c1d-52eed7e32e87"}}}