{"componentChunkName":"component---src-templates-docs-js","path":"/api/cursor","webpackCompilationHash":"e536b55f7567f3131f54","result":{"data":{"site":{"siteMetadata":{"title":"EOPI-JS","docsLocation":"https://github.com/brianc/node-postgres-docs/tree/master/content"}},"mdx":{"fields":{"id":"49b8ff09-baaf-5224-835e-580aec79ec9b","title":"pg.Cursor","slug":"/api/cursor"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"pg.Cursor\",\n  \"slug\": \"/api/cursor\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A cursor can be used to efficiently read through large result sets without loading the entire result-set into memory ahead of time. It's useful to simulate a 'streaming' style read of data, or exit early from a large result set. The cursor is passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.query\"), \" and is dispatched internally in a way very similar to how normal queries are sent, but the API it presents for consuming the result set is different.\"), mdx(\"h2\", {\n    \"id\": \"install\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"install\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ npm install pg pg-cursor\\n\")), mdx(\"h2\", {\n    \"id\": \"constructor\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"constructor\"), mdx(\"h3\", {\n    \"id\": \"new-cursortext-string-values-any-config-cursorqueryconfig\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"new Cursor(text: String, values: Any[][, config: CursorQueryConfig])\")), mdx(\"p\", null, \"Instantiates a new Cursor. A cursor is an instance of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Submittable\"), \" and should be passed directly to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.query\"), \" method.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\nconst Cursor = require('pg-cursor')\\n\\nconst pool = new Pool()\\nconst client = await pool.connect()\\nconst text = 'SELECT * FROM my_large_table WHERE something > $1'\\nconst values = [10]\\n\\nconst cursor = client.query(new Cursor(text, values))\\n\\ncursor.read(100, (err, rows) => {\\n  cursor.close(() => {\\n    client.release()\\n  })\\n})\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"interface CursorQueryConfig {\\n  // by default rows come out as a key/value pair for each row\\n  // pass the string 'array' here to receive rows as an array of values\\n  rowMode?: string;\\n\\n  // custom type parsers just for this query result\\n  types?: Types;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"read\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"read\"), mdx(\"h3\", {\n    \"id\": \"cursorreadrowcount-number-callback-err-error-rows-row-result-pgresult--void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"cursor.read(rowCount: Number, callback: (err: Error, rows: Row[], result: pg.Result) => void) => void\")), mdx(\"p\", null, \"Read \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rowCount\"), \" rows from the cursor instance. The callback will be called when the rows are available, loaded into memory, parsed, and converted to JavaScript types.\"), mdx(\"p\", null, \"If the cursor has read to the end of the result sets all subsequent calls to cursor#read will return a 0 length array of rows. Calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"read\"), \" on a cursor that has read to the end.\"), mdx(\"p\", null, \"Here is an example of reading to the end of a cursor:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { Pool } = require('pg')\\nconst Cursor = require('pg-cursor')\\n\\nconst pool = new Pool()\\nconst client = await pool.connect()\\nconst cursor = client.query(new Cursor('select * from generate_series(0, 5)'))\\ncursor.read(100, (err, rows) => {\\n  if (err) {\\n    throw err\\n  }\\n  assert(rows.length == 6)\\n  cursor.read(100, (err, rows) => {\\n    assert(rows.length == 0)\\n  })\\n})\\n\")), mdx(\"h2\", {\n    \"id\": \"close\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"close\"), mdx(\"h3\", {\n    \"id\": \"cursorclosecallback---void--void\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"cursor.close(callback: () => void) => void\")), mdx(\"p\", null, \"Used to close the cursor early. If you want to stop reading from the cursor before you get all of the rows returned, call this.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#install","title":"install"},{"url":"#constructor","title":"constructor","items":[{"url":"#new-cursortext-string-values-any-config-cursorqueryconfig","title":"new Cursor(text: String, values: Any[][, config: CursorQueryConfig])"}]},{"url":"#read","title":"read","items":[{"url":"#cursorreadrowcount-number-callback-err-error-rows-row-result-pgresult--void--void","title":"cursor.read(rowCount: Number, callback: (err: Error, rows: Row[], result: pg.Result) => void) => void"}]},{"url":"#close","title":"close","items":[{"url":"#cursorclosecallback---void--void","title":"cursor.close(callback: () => void) => void"}]}]},"parent":{"__typename":"File","relativePath":"api/5-cursor.mdx"},"frontmatter":{"metaTitle":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/features","title":"Features","filename":{"name":"features"}}}},{"node":{"fields":{"slug":"/guides","title":"Guides","filename":{"name":"guides"}}}},{"node":{"fields":{"slug":"/api","title":"API","filename":{"name":"api"}}}},{"node":{"fields":{"slug":"/api/result","title":"pg.Result","filename":{"name":"3-result"}}}},{"node":{"fields":{"slug":"/api/types","title":"Types","filename":{"name":"4-types"}}}},{"node":{"fields":{"slug":"/features/queries","title":"Queries","filename":{"name":"2-queries"}}}},{"node":{"fields":{"slug":"/features/pooling","title":"Pooling","filename":{"name":"3-pooling"}}}},{"node":{"fields":{"slug":"/features/transactions","title":"Transactions","filename":{"name":"4-transactions"}}}},{"node":{"fields":{"slug":"/features/ssl","title":"SSL","filename":{"name":"6-ssl"}}}},{"node":{"fields":{"slug":"/features/native","title":"Native Bindings","filename":{"name":"7-native"}}}},{"node":{"fields":{"slug":"/features/types","title":"Data Types","filename":{"name":"5-types"}}}},{"node":{"fields":{"slug":"/features/connecting","title":"Connecting","filename":{"name":"1-connecting"}}}},{"node":{"fields":{"slug":"/guides/project-structure","title":"Suggested Project Structure","filename":{"name":"1-project-structure"}}}},{"node":{"fields":{"slug":"/guides/async-express","title":"Express with async/await","filename":{"name":"2-async-express"}}}},{"node":{"fields":{"slug":"/api/cursor","title":"pg.Cursor","filename":{"name":"5-cursor"}}}},{"node":{"fields":{"slug":"/guides/upgrading","title":"Upgrading","filename":{"name":"3-upgrading"}}}},{"node":{"fields":{"slug":"/announcements","title":"Announcements","filename":{"name":"announcements"}}}},{"node":{"fields":{"slug":"/api/client","title":"pg.Client","filename":{"name":"2-client"}}}},{"node":{"fields":{"slug":"/api/pool","title":"pg.Pool","filename":{"name":"1-pool"}}}},{"node":{"fields":{"slug":"/","title":"Welcome","filename":{"name":"welcome"}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"49b8ff09-baaf-5224-835e-580aec79ec9b"}}}